#include "Packages/com.unity.postprocessing/PostProcessing/Shaders/StdLib.hlsl"
#define sq(x) (x * x)

#include "AnalyticalShadowsCommonV1.hlsl"

//main keywords
#pragma multi_compile_local _ USE_LIGHTMAP_DIRECTION
#pragma multi_compile_local _ USE_PROBE_DIRECTION
#pragma multi_compile_local _ TRACE_BOX_COLLIDERS
#pragma multi_compile_local _ TRACE_SPHERE_COLLIDERS
#pragma multi_compile_local _ TRACE_CAPSULE_COLLIDERS

//|||||||||||||||||||||||||||||||||||||| SHAPE BUFFERS ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| SHAPE BUFFERS ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| SHAPE BUFFERS ||||||||||||||||||||||||||||||||||||||
struct CubeStruct
{
    float3 position;
    float3 size;
    float4 rotation;
    float3 sphericalHarmonicDirection;
};

struct SphereStruct
{
    float3 position;
    float radius;
    float3 sphericalHarmonicDirection;
};

struct CapsuleStruct
{
    float3 position;
    float3 direction;
    float height;
    float radius;
    float4 rotation;
    float3 sphericalHarmonicDirection;
};

RWStructuredBuffer<CubeStruct> Cubes;
RWStructuredBuffer<SphereStruct> Spheres;
RWStructuredBuffer<CapsuleStruct> Capsules;

//|||||||||||||||||||||||||||||||||||||| TEXTURES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| TEXTURES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| TEXTURES ||||||||||||||||||||||||||||||||||||||

float2 _RenderResolution;
Texture2D<float> _CameraDepthTexture;
Texture2D<float4> DirectionalBuffer;
RWTexture2D<float4> Result;

SamplerState _PointClamp;
SamplerState _LinearClamp;

float TEX2D_SHARP(Texture2D<float> tex, float2 uv)
{
    return tex.SampleLevel(_PointClamp, uv, 0);
}

float2 TEX2D_SHARP(Texture2D<float2> tex, float2 uv)
{
    return tex.SampleLevel(_PointClamp, uv, 0);
}

float3 TEX2D_SHARP(Texture2D<float3> tex, float2 uv)
{
    return tex.SampleLevel(_PointClamp, uv, 0);
}

float4 TEX2D_SHARP(Texture2D<float4> tex, float2 uv)
{
    return tex.SampleLevel(_PointClamp, uv, 0);
}

float TEX2D(Texture2D<float> tex, float2 uv)
{
    return tex.SampleLevel(_LinearClamp, uv, 0);
}

float2 TEX2D(Texture2D<float2> tex, float2 uv)
{
    return tex.SampleLevel(_LinearClamp, uv, 0);
}

float3 TEX2D(Texture2D<float3> tex, float2 uv)
{
    return tex.SampleLevel(_LinearClamp, uv, 0);
}

float4 TEX2D(Texture2D<float4> tex, float2 uv)
{
    return tex.SampleLevel(_LinearClamp, uv, 0);
}

//|||||||||||||||||||||||||||||||||||||| PROPERTIES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| PROPERTIES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| PROPERTIES ||||||||||||||||||||||||||||||||||||||

float _ConeAngle;
float3 _GlobalDirection;

float4x4 _ViewProjInv;

/*
    ref: https://developer.amd.com/wordpress/media/2012/10/Oat-AmbientApetureLighting.pdf
    Approximate the area of intersection of two spherical caps.

    With some modifcations proposed by the shadertoy implementation
*/
float SphericalCapsIntersectionAreaFast(float cosCap1, float cosCap2, float cap2, float cosDistance)
{
    // Precompute constants
    float radius1 = acosFastPositive(cosCap1); // First caps radius (arc length in radians)
    float radius2 = cap2; // Second caps radius (in radians)
    float dist = acosFast(cosDistance); // Distance between caps (radians between centers of caps)

    // Conditional expressions instead of if-else
    float check1 = min(radius1, radius2) <= max(radius1, radius2) - dist;
    float check2 = radius1 + radius2 <= dist;

    // Ternary operator to replace if-else
    float result = check1 ? (1.0 - max(cosCap1, cosCap2)) : (check2 ? 0.0 : 1.0 - max(cosCap1, cosCap2));

    float delta = abs(radius1 - radius2);
    float x = 1.0 - saturate((dist - delta) / max(radius1 + radius2 - delta, EPSILON));

    // simplified smoothstep()
    float area = sq(x) * (-2.0 * x + 3.0);

    // Multiply by (1.0 - max(cosCap1, cosCap2)) only once
    return area * result;
}

float directionalOcclusionSphere(float3 rayPosition, float3 spherePosition, float sphereRadius, float4 coneProperties)
{
    float3 occluderPosition = spherePosition.xyz - rayPosition;
    float occluderLength2 = dot(occluderPosition, occluderPosition);
    float3 occluderDir = occluderPosition * rsqrt(occluderLength2);

    float cosPhi = dot(occluderDir, coneProperties.xyz);
    // sq(sphere.w) should be a uniform --> capsuleRadius^2
    float cosTheta = sqrt(occluderLength2 / (sq(sphereRadius) + occluderLength2));
    float cosCone = cos(coneProperties.w);

    return 1.0 - SphericalCapsIntersectionAreaFast(cosTheta, cosCone, coneProperties.w, cosPhi) / (1.0 - cosCone);
}

//this sort of work but doesn't support rotations
float directionalOcclusionCube(float3 rayPosition, float3 cubePos, float3 cubeSize, float4 cubeRotation, float4 coneProperties)
{
    float3 occluder = cubePos.xyz - rayPosition;
    occluder /= cubeSize * 0.5f;

    float occluderLength2 = dot(cubeRotation.xyz, occluder);
    float3 occluderDir = occluder * rsqrt(occluderLength2);
    //occluderDir *= cubeRotation;
    //occluderDir = cross(occluderDir, cubeRotation);

    float cosPhi = dot(occluderDir, coneProperties.xyz);
    // sq(sphere.w) should be a uniform --> capsuleRadius^2
    float cosTheta = sqrt(occluderLength2 / (sq(1.0f) + occluderLength2));
    float cosCone = cos(coneProperties.w);

    return 1.0 - SphericalCapsIntersectionAreaFast(cosTheta, cosCone, coneProperties.w, cosPhi) / (1.0 - cosCone);
}

float directionalOcclusionCapsule(float3 rayPosition, float3 capsuleA, float3 capsuleB, float capsuleRadius, float4 coneProperties)
{
    float3 Ld = capsuleB - capsuleA;
    float3 L0 = capsuleA - rayPosition;
    float a = dot(coneProperties.xyz, Ld);
    float t = saturate(dot(L0, a * coneProperties.xyz - Ld) / (dot(Ld, Ld) - a * a));
    float3 positionToRay = capsuleA + t * Ld;

    return directionalOcclusionSphere(rayPosition, positionToRay, capsuleRadius, coneProperties);
}

float4 GetConeProperties(float2 uv)
{
    #if defined (USE_LIGHTMAP_DIRECTION)
        float4 sceneDirectionality = TEX2D(DirectionalBuffer, uv) * 2.0f - 1.0f;
        float4 cone = float4(sceneDirectionality.xyz, radians(_ConeAngle) * 0.5);
    #else
        float4 cone = float4(_GlobalDirection.xyz, radians(_ConeAngle) * 0.5);
    #endif

    cone.xyz = normalize(cone.xyz);

    return cone;
}

//|||||||||||||||||||||||||||||||||||||||||||||| MAIN ||||||||||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||||||||||| MAIN ||||||||||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||||||||||| MAIN ||||||||||||||||||||||||||||||||||||||||||||||

#pragma kernel CSMain
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 uv = (id.xy + float2(0.5, 0.5)) / _RenderResolution;
    float result = 1.0;

    float cameraDepthColor = TEX2D(_CameraDepthTexture, uv);
    float4 computedWorldPosition = float4(0, 0, 0, 1);
    computedWorldPosition.x = (uv.x * 2.0f) - 1.0f;
    computedWorldPosition.y = (uv.y * 2.0f) - 1.0f;
    computedWorldPosition.z = cameraDepthColor.r;
    computedWorldPosition = mul(_ViewProjInv, computedWorldPosition);
    computedWorldPosition /= computedWorldPosition.w;

    float4 cone = GetConeProperties(uv);

    #if defined (TRACE_SPHERE_COLLIDERS)
        for (uint x = 0; x < Spheres.Length; x++)
        {
            SphereStruct sphere = Spheres[x];

            #if defined (USE_PROBE_DIRECTION)
                float4 newCone = float4(sphere.sphericalHarmonicDirection, radians(_ConeAngle) * 0.5);
                result *= directionalOcclusionSphere(computedWorldPosition, sphere.position, sphere.radius, newCone);
            #else
                result *= directionalOcclusionSphere(computedWorldPosition, sphere.position, sphere.radius, cone);
            #endif
        }
    #endif

    //needs a cube function
    #if defined (TRACE_BOX_COLLIDERS)
        for (uint y = 0; y < Cubes.Length; y++)
        {
            CubeStruct cube = Cubes[y];

            #if defined (USE_PROBE_DIRECTION)
                float4 newCone = float4(cube.sphericalHarmonicDirection, radians(_ConeAngle) * 0.5);
                result *= directionalOcclusionCube(computedWorldPosition, cube.position, cube.size, cube.rotation, newCone);
            #else
                result *= directionalOcclusionCube(computedWorldPosition, cube.position, cube.size, cube.rotation, cone);
            #endif
        }
    #endif

    #if defined (TRACE_CAPSULE_COLLIDERS)
        for (uint z = 0; z < Capsules.Length; z++)
        {
            CapsuleStruct capsule = Capsules[z];

            float3 endA = capsule.position + capsule.direction * capsule.height;
            float3 endB = capsule.position - capsule.direction * capsule.height;

            #if defined (USE_PROBE_DIRECTION)
                float4 newCone = float4(capsule.sphericalHarmonicDirection, radians(_ConeAngle) * 0.5);
                result *= directionalOcclusionCapsule(computedWorldPosition, endA, endB, capsule.radius, newCone);
            #else
                result *= directionalOcclusionCapsule(computedWorldPosition, endA, endB, capsule.radius, cone);
            #endif
        }
    #endif

    Result[id.xy] = float4(result, 0, 0, 1);
}