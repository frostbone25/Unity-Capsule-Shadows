#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#pragma kernel CapsuleOcclusion

#pragma multi_compile _ AMBIENT_OCCLUSION
#pragma multi_compile _ SPECULAR_OCCLUSION
#pragma multi_compile _ DIRECTIONAL_SHADOW


RW_TEXTURE2D_X(float, _OcclusionTexture);   // AO texture. 
RW_TEXTURE2D_X(unorm float2, _CapsuleOcclusions);   // R: Specular Occlusion G: Shadow.  8bit UNorm per channel.

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/Shaders/CapsuleOcclusionCommon.hlsl"

// --------------------------------------------
// Options
// --------------------------------------------
// IMPORTANT TODO: For now assume we run at full res, whenever we need to run in half res we need a different way to select the right tile, for now it is assumed that we have
// a thread/pixel 1-by-1 mapping.
// Also, please note that for half resolution the ambient occlusion needs to work differently, we need place the data in the pre-upscale AO data which is differently format (ready for upscale). 

// All in all to run in half res a non-trivial amount of small fixes are needed, but we'll need that.

// #define HALF_RES 0 


[numthreads(16, 16, 1)]
void CapsuleOcclusion(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    uint2 pixelCoord = dispatchThreadId.xy;
    uint2 tileCoord = groupId;

    float depth = LoadCameraDepth(pixelCoord.xy);

    PositionInputs posInput = GetPositionInput(pixelCoord.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, tileCoord);

    float ao = 1.0f;
    float specOcclusion = 1;
    float shadow = 1;

    uint capsuleFeatureFlags = 0;
#ifdef AMBIENT_OCCLUSION
    capsuleFeatureFlags = capsuleFeatureFlags | CAPSULEOCCLUSIONTYPE_AMBIENT_OCCLUSION;
#endif
#ifdef SPECULAR_OCCLUSION
    capsuleFeatureFlags = capsuleFeatureFlags | CAPSULEOCCLUSIONTYPE_SPECULAR_OCCLUSION;
#endif
#ifdef DIRECTIONAL_SHADOW
    capsuleFeatureFlags = capsuleFeatureFlags | CAPSULEOCCLUSIONTYPE_DIRECTIONAL_SHADOWS;
#endif

    if ((capsuleFeatureFlags != 0)
        && (posInput.deviceDepth > 0.0f))
    {
        NormalData normalData;
        const float4 normalBuffer = LOAD_TEXTURE2D_X(_NormalBufferTexture, pixelCoord);
        DecodeFromNormalBuffer(normalBuffer, pixelCoord, normalData);

        float3 V = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

        EvaluateCapsuleOcclusion(capsuleFeatureFlags,
            posInput,
            normalData.normalWS,
            V,
            max(0.04f, PerceptualRoughnessToRoughness(normalData.perceptualRoughness)),
            ao,
            specOcclusion,
            shadow
        );
    }

#ifdef AMBIENT_OCCLUSION
    _OcclusionTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = 1.0f - ((1.0f - _OcclusionTexture[COORD_TEXTURE2D_X(pixelCoord.xy)]) * ao);
#endif

#if defined(SPECULAR_OCCLUSION) || defined(DIRECTIONAL_SHADOW)
    _CapsuleOcclusions[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = float2(specOcclusion, lerp(1, shadow, _CapsuleShadowIntensity));
#endif


}
